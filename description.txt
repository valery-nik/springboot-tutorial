boot2docker - легковесный дистрибьютив линукса для запуска докер контейнеров. Запусается из под виртуалбокса.
Вообщем, это docker demon(Docker engine) для старых win и osx. http://alexey.detr.us/posts/2015/2015-02-11-first-time-docker/

https://cdn-images-1.medium.com/max/800/0*ByLYki7viX6a-pOI.
http://blog.arungupta.me/wp-content/uploads/2014/07/docker-architecture-techtip39.png

Основные компонент докерной экосистемы:
docker client (или просто docker) - консольная утилита для управления docker-демоном по HTTP.
docker-machine - инструмент для быстрого(автоматического) локального/удаленного создания/развертывания кластера из Docker-хостов (Запуск, остановка, перезапуск, обновление, настройка клиентов).
    Да и вообще, докер всегда лучше устанавливать через docker-machine.
Docker engine(docker demon) - сердце docker'а, реализующее docker API. Это демон работающий на хост-машине и умеющий скачивать и заливать образы, запускать из них контейнеры,
    следить за запущенными контейнерами, собирать логи и настраивать сеть между контейнерами (а с версии 0.8 и между машинами). А еще именно демон создает образы контейнеров,
    хоть и может показаться, что это делает docker-client.
docker host - ось, на которой запущен docker demon и внутри каторой запускаются контейнеры.
docker registry (Docker Hub) - централизованное хранит образов. https://hub.docker.com/ - реестр докер-образов (хранилище docker образов)
Compose - инструмент одновременного запуска нескольких контейнеров, что позволяетопределять мультиконтейнерное приложение со всеми зависимостями
    в одном файле и запускать это приложение одной командой up.
Swarm



docker info - вывод информации о докер хосте
docker images - все доступные докер-образы
docker ps - просмотр активных контейнеров

https://habrahabr.ru/post/253877/ - как работает docker run
docker run - стартует котейнер из заданого образа. Образ сначала ищется в локальном, а потом в гловбальном реестре.
docker run -d -P seqvence/static-site - запускает контейнер из образа seqvence/static-site
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
docker run --name <имя контейнера> -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
docker run -p 8082:8080 -t iozol/springboot - запускаем контейнер и его порт 8080 пробрасываем на 8082 порт хоста,
т.е. http://192.168.99.100:8082/persons

docker run -p IP:HOST_PORT:CONTAINER_PORT


Термины (http://www.javaworld.com/article/3000781/development-tools/open-source-java-projects-docker.html)
Docker engine - "средство контейнеризации реализующее docker API. boot2docker - это docker engine для старых версий windows" ?????
Docker image - Этот образ говорит docker-у, что находится в контейнере, какой процесс запустить, когда запускается контейнер
 и другие конфигурационные данные. Docker образ доступен только для чтения.
Dockerfile - текстовый файл, содержащий команды(инструкции) для создания(сборки) образа.
    типы команд в докерфайле:
        запуск команды
        добавление файла или директории
        создание переменной окружения
        указания, что запускать когда запускается контейнер этого образа

docker build -t <имя_репозитория/имя_образа:тег> <имя_репозитория/имя_образа:тег> -f <путь_к_папке_докер_файла> - сборка докер образа
Пример: docker build -t iozol/springboot:latest .  --где "." - текущая папка

docker build -f ./src/main/docker/Dockerfile .
-f - задает путь к докер-фалу
. - путь к директории, т.е. это означает - включить содержимое текущей директории в buildcontext

Docker container - запущенный экземпляр докер-имеджа и состоит из из операционной системы, пользовательских файлов и метаданных.


docker run -it --rm python:3.4
Параметры -it запускают контейнер в интерактивном режиме и привязывает ее к консоли для взаимодействия.
Параметр --rm после выхода завершения работы контейнер самоудалится.
Параметр -d -конетейнер будет работать в фоновом режиме

docker run -it --rm python:3.4 ls - когда контейнер запустится, будет тут же выполнена команда ls, которая
покажет все файлы и фильтры в главной директории.


docker-machine - инструмент для быстрого удаленного развертывания кластера из Docker-хостов. Да и вообще, докер всегда лучше устанавливать
    через docker-machine. https://habrahabr.ru/post/277699/#comment_8780813, https://www.8host.com/blog/upravlenie-udalyonnymi-xostami-docker-s-pomoshhyu-docker-machine-v-ubuntu-16-04/
docker-machine ls
docker-machine env default

Ссылки:
http://www.javaworld.com/article/3000781/development-tools/open-source-java-projects-docker.html?page=2
https://www.youtube.com/watch?v=-CayzT_x-aY
http://www.netpatch.ru/research/docker/2014/03.24-linux-docker-practical-guide.html
https://ivan.bessarabov.ru/blog/docker-commands - Работа с контейнерами !!!
https://github.com/javaee-samples/docker-java/blob/master/chapters/docker-compose.adoc
https://github.com/saada/docker-compose-php-mysql/blob/master/docker-compose.yml
https://docs.docker.com/compose/wordpress/
https://github.com/cer/microservices-examples/blob/master/docker-compose.yml
http://stackoverflow.com/questions/30330442/how-to-ssh-into-docker-machine-virualbox-instance - коннект с докер хостом по ssh
https://habrahabr.ru/post/247629/#comment_8219229 - комментарий про слои в докер-имеджам и запуск котейнера в интерактивном режиме.
http://sysadm.ru/linux/virtual/docker/basics/basic-commands/
https://xakep.ru/2015/06/01/docker-usage/
https://habrahabr.ru/post/267441/
https://habrahabr.ru/post/272145/
https://ast.rocks/blog/docker-create-container
https://www.youtube.com/watch?v=-O9ArkgkorA
https://toster.ru/q/22512
https://github.com/jiwhiz/spring-boot-docker-mysql
https://ejf.io/dev_blog/mysql-java-docker/
https://blog.amartynov.ru/docker-mysql/
http://wiki.russianfedora.pro/index.php?title=Docker
https://habrahabr.ru/post/253877/
https://spring.io/guides/gs/spring-boot-docker/
http://www.3pillarglobal.com/insights/building-a-microservice-architecture-with-spring-boot-and-docker-part-iii
https://habrahabr.ru/company/infobox/blog/240623/
https://xakep.ru/2015/06/04/docker-faq/
https://github.com/cer/microservices-examples/blob/master/docker-compose.yml
http://xgu.ru/wiki/Docker - wiki на русском
https://habrahabr.ru/post/253877/ - описание run
https://blog.pavelsklenar.com/5-useful-docker-tip-and-tricks-on-windows/ - как нужно подключить volume на windows
https://habrahabr.ru/post/277699/#comment_8780813 - коммент про Docker в production
http://blog.arungupta.me/docker-machine-swarm-compose-couchbase-wildfly/
http://wiki.russianfedora.pro/index.php?title=Docker#Docker-engine
https://habrahabr.ru/company/infobox/blog/263001/ - алгоритм работы с Docker Compose
https://toster.ru/q/200627 - Как правильно использовать Docker для веб разработки?
https://toster.ru/q/348228 - Как правильно делать deploy с помощью docker registry? (docker-compose.yml для prod и dev)

Чеклист для деплоя микросеврисов:
- создаем мавен мультимодульный проект
- в родительском pom прописываем версию докер плагина для билда образов. (не забываем прописать в винде данные переменные окружения!!! - https://github.com/spotify/docker-maven-plugin/issues/177)
  docker.image.prefix - можно юзать название семейства артифактов (например jdocker, sem)  
             <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.14</version>
                <configuration>
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin> 
- в дочерних pom'ах делаем его настройку для билд фазы.

1 - Создаем для каждого запускаемого java артифакта свой докерфайл: /<микросервис_N>/docker/Dockerfile
    (для постоения докер имеджа мик.сервиса)
2 - Создаем docker-compose.yml, который развернет все микросервисы из заданных имеждей.
3 - Запускаем Docker quickstart terminal (windows) и работаем через него: docker <имя_команды> или docker-compose

4 Список основных команд терминала:
  - docker-compose up
  - docker-compose build
  - docker-machine ls - покажет список активных докер хостов и их IP (обычно один).
  - docker images - все доступные докер-образы
  - docker ps - просмотр активных контейнеров
  - docker run [-параметры] [--name имя_контейнера] [имя_реестра/имя_образа] [команда] - создание + старт контейнера
  - docker start <имя_контейнера> - старт контейнера
  - docker stop <имя_контейнера>
  - docker restart


https://habrahabr.ru/company/infopulse/blog/237737/ - отличная статья!!!!
https://habrahabr.ru/post/272145/
http://containertutorials.com/docker-compose/nginx-flask-postgresql.html
http://containertutorials.com/docker-compose/nginx-flask-postgresql.html
https://github.com/bytecode-mike/docker-b00t
https://github.com/jiwhiz/spring-boot-docker-mysql !!!!
http://affy.blogspot.ru/2015/04/running-spring-boot-inside-docker.html
https://github.com/cer/microservices-examples - хороший пример spring boot, spring cloud + docker

# удаление всех незапущенных контейнеров
docker rm $(docker ps -q -f status=exited) - (http://stackoverflow.com/questions/17236796/how-to-remove-old-docker-containers)

# удалить просроченные образы и ненужные слои
docker rmi $(docker images -q -f dangling=true) -(https://blog.amartynov.ru/docker-mysql/)

# ордеринг проброса портов
-p IP:HOST_PORT:CONTAINER_PORT - docker run -p 9999:27018 (https://image.slidesharecdn.com/dockerrelateiq-presentation-131020185517-phpapp01/95/docker-relateiq-presentation-9-638.jpg?cb=1382295374)

# монтирование внешних папок (volum)
docker run -i -t --rm -v /host-volume:/container-volume IMAGE_NAME bash
docker run -d -P --name web -v /src/webapp:/webapp training/webapp python app.py 

# запуск команды mysql на запущенном контейнере mysql_cont
docker exec -i mysql_cont mysql -uroot -p123456  <<< "use myapp; show tables; select 'время =', now();"

# старт контейнера с БД и заданными параметрами окружения
docker run --name mysql -p 192.168.99.100:3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_USER=iozol -e MYSQL_PASSWORD=123456 -e MYSQL_DATABASE=myapp -d mysql:5.7

# запуск самуничтожающегося контейнера в интерактивном режиме
docker run -i -t --rm private/mysql bash #Попробуйте команду top или which mysqld. Для выхода — exit.

docker run -p 3306:3306 --name sem_mysql -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=sem -v mysql-data:/var/lib/mysql -d mysql:5.7
docker run -it -p9307:9307 --name test --rm --entrypoint /bin/bash semdockerizing_sphinx:latest

# статистика по запущенным контейнерам
sudo docker stats $(sudo docker ps --format={{.Names}})

# запуск шела в run команде
docker run -d alpine /bin/sh -c "while true; do echo hello world; sleep 1; done" - вывод в консоль, как пример логирования

# просмотреть все слои в докер-имеже
docker history iozol/ci-test

# отключить дефолтный entrypoint
docker run -it --name cassandra --entrypoint /bin/sh -p 9042:9042 iozol/cassandra:3.11.0

# вывод 1000 последних строк логов совмещенных с stdin и error потоками + grep 
docker logs --tail 1000 -f <container_id> 2>&1 | grep discovery

#
docker logs ec8137736f50 2>&1 | grep '^2017-12-14 ' | grep '"STATUS":5..' | tail -10 | cut -d' ' -f1,2 | cut -d'.' -f1 

# 
docker logs ec8137736f50 2>&1 | sed -n '/^2017-12-14 14:54:0/,/^2017-12-14 14:55/p'

# отсоединиться от контейнера в режиме отладки, но не завершить главный процесс
# https://stackoverflow.com/questions/19688314/how-do-you-attach-and-detach-from-dockers-process
ctrl + P ctrl + Q

# билдежка и тегирование нового имеджа
docker build -t giza.dev.eldorado.ru:5000/mysql-batch:1.0 .
docker push giza.dev.eldorado.ru:5000/mysql-batch:1.0
